{"version":3,"file":"app.js","sources":["../../node_modules/jquery/dist/jquery.js","../../node_modules/slick-carousel/slick/slick.js","../../node_modules/scrollspy-js/src/js/modules/scrollspy.js","../../node_modules/scrollspy-js/src/js/scrollspy.js","slider.js","anchor-scroll.js","dropdown.js","modal.js","menu.js","tabs.js","app.js"],"sourcesContent":["/*!\n * jQuery JavaScript Library v3.3.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2018-01-20T17:24Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, doc, node ) {\n\t\tdoc = doc || document;\n\n\t\tvar i,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\t\tif ( node[ i ] ) {\n\t\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.3.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc, node );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = div.offsetWidth === 36 || \"absolute\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\t\t) );\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\t\tval = curCSS( elem, dimension, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox;\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = valueIsBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ dimension ] );\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\tif ( val === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) {\n\n\t\tval = elem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];\n\n\t\t// offsetWidth/offsetHeight provide border-box values\n\t\tvalueIsBorderBox = true;\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\t\t\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra && boxModelAdjustment(\n\t\t\t\t\telem,\n\t\t\t\t\tdimension,\n\t\t\t\t\textra,\n\t\t\t\t\tisBorderBox,\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && support.scrollboxSize() === styles.position ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","/*\n     _ _      _       _\n ___| (_) ___| | __  (_)___\n/ __| | |/ __| |/ /  | / __|\n\\__ \\ | | (__|   < _ | \\__ \\\n|___/_|_|\\___|_|\\_(_)/ |___/\n                   |__/\n\n Version: 1.8.1\n  Author: Ken Wheeler\n Website: http://kenwheeler.github.io\n    Docs: http://kenwheeler.github.io/slick\n    Repo: http://github.com/kenwheeler/slick\n  Issues: http://github.com/kenwheeler/slick/issues\n\n */\n/* global window, document, define, jQuery, setInterval, clearInterval */\n;(function(factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n\n}(function($) {\n    'use strict';\n    var Slick = window.Slick || {};\n\n    Slick = (function() {\n\n        var instanceUid = 0;\n\n        function Slick(element, settings) {\n\n            var _ = this, dataSettings;\n\n            _.defaults = {\n                accessibility: true,\n                adaptiveHeight: false,\n                appendArrows: $(element),\n                appendDots: $(element),\n                arrows: true,\n                asNavFor: null,\n                prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\n                nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\n                autoplay: false,\n                autoplaySpeed: 3000,\n                centerMode: false,\n                centerPadding: '50px',\n                cssEase: 'ease',\n                customPaging: function(slider, i) {\n                    return $('<button type=\"button\" />').text(i + 1);\n                },\n                dots: false,\n                dotsClass: 'slick-dots',\n                draggable: true,\n                easing: 'linear',\n                edgeFriction: 0.35,\n                fade: false,\n                focusOnSelect: false,\n                focusOnChange: false,\n                infinite: true,\n                initialSlide: 0,\n                lazyLoad: 'ondemand',\n                mobileFirst: false,\n                pauseOnHover: true,\n                pauseOnFocus: true,\n                pauseOnDotsHover: false,\n                respondTo: 'window',\n                responsive: null,\n                rows: 1,\n                rtl: false,\n                slide: '',\n                slidesPerRow: 1,\n                slidesToShow: 1,\n                slidesToScroll: 1,\n                speed: 500,\n                swipe: true,\n                swipeToSlide: false,\n                touchMove: true,\n                touchThreshold: 5,\n                useCSS: true,\n                useTransform: true,\n                variableWidth: false,\n                vertical: false,\n                verticalSwiping: false,\n                waitForAnimate: true,\n                zIndex: 1000\n            };\n\n            _.initials = {\n                animating: false,\n                dragging: false,\n                autoPlayTimer: null,\n                currentDirection: 0,\n                currentLeft: null,\n                currentSlide: 0,\n                direction: 1,\n                $dots: null,\n                listWidth: null,\n                listHeight: null,\n                loadIndex: 0,\n                $nextArrow: null,\n                $prevArrow: null,\n                scrolling: false,\n                slideCount: null,\n                slideWidth: null,\n                $slideTrack: null,\n                $slides: null,\n                sliding: false,\n                slideOffset: 0,\n                swipeLeft: null,\n                swiping: false,\n                $list: null,\n                touchObject: {},\n                transformsEnabled: false,\n                unslicked: false\n            };\n\n            $.extend(_, _.initials);\n\n            _.activeBreakpoint = null;\n            _.animType = null;\n            _.animProp = null;\n            _.breakpoints = [];\n            _.breakpointSettings = [];\n            _.cssTransitions = false;\n            _.focussed = false;\n            _.interrupted = false;\n            _.hidden = 'hidden';\n            _.paused = true;\n            _.positionProp = null;\n            _.respondTo = null;\n            _.rowCount = 1;\n            _.shouldClick = true;\n            _.$slider = $(element);\n            _.$slidesCache = null;\n            _.transformType = null;\n            _.transitionType = null;\n            _.visibilityChange = 'visibilitychange';\n            _.windowWidth = 0;\n            _.windowTimer = null;\n\n            dataSettings = $(element).data('slick') || {};\n\n            _.options = $.extend({}, _.defaults, settings, dataSettings);\n\n            _.currentSlide = _.options.initialSlide;\n\n            _.originalSettings = _.options;\n\n            if (typeof document.mozHidden !== 'undefined') {\n                _.hidden = 'mozHidden';\n                _.visibilityChange = 'mozvisibilitychange';\n            } else if (typeof document.webkitHidden !== 'undefined') {\n                _.hidden = 'webkitHidden';\n                _.visibilityChange = 'webkitvisibilitychange';\n            }\n\n            _.autoPlay = $.proxy(_.autoPlay, _);\n            _.autoPlayClear = $.proxy(_.autoPlayClear, _);\n            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\n            _.changeSlide = $.proxy(_.changeSlide, _);\n            _.clickHandler = $.proxy(_.clickHandler, _);\n            _.selectHandler = $.proxy(_.selectHandler, _);\n            _.setPosition = $.proxy(_.setPosition, _);\n            _.swipeHandler = $.proxy(_.swipeHandler, _);\n            _.dragHandler = $.proxy(_.dragHandler, _);\n            _.keyHandler = $.proxy(_.keyHandler, _);\n\n            _.instanceUid = instanceUid++;\n\n            // A simple way to check for HTML strings\n            // Strict HTML recognition (must start with <)\n            // Extracted from jQuery v1.11 source\n            _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\n\n\n            _.registerBreakpoints();\n            _.init(true);\n\n        }\n\n        return Slick;\n\n    }());\n\n    Slick.prototype.activateADA = function() {\n        var _ = this;\n\n        _.$slideTrack.find('.slick-active').attr({\n            'aria-hidden': 'false'\n        }).find('a, input, button, select').attr({\n            'tabindex': '0'\n        });\n\n    };\n\n    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            addBefore = index;\n            index = null;\n        } else if (index < 0 || (index >= _.slideCount)) {\n            return false;\n        }\n\n        _.unload();\n\n        if (typeof(index) === 'number') {\n            if (index === 0 && _.$slides.length === 0) {\n                $(markup).appendTo(_.$slideTrack);\n            } else if (addBefore) {\n                $(markup).insertBefore(_.$slides.eq(index));\n            } else {\n                $(markup).insertAfter(_.$slides.eq(index));\n            }\n        } else {\n            if (addBefore === true) {\n                $(markup).prependTo(_.$slideTrack);\n            } else {\n                $(markup).appendTo(_.$slideTrack);\n            }\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slides.each(function(index, element) {\n            $(element).attr('data-slick-index', index);\n        });\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.animateHeight = function() {\n        var _ = this;\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.animate({\n                height: targetHeight\n            }, _.options.speed);\n        }\n    };\n\n    Slick.prototype.animateSlide = function(targetLeft, callback) {\n\n        var animProps = {},\n            _ = this;\n\n        _.animateHeight();\n\n        if (_.options.rtl === true && _.options.vertical === false) {\n            targetLeft = -targetLeft;\n        }\n        if (_.transformsEnabled === false) {\n            if (_.options.vertical === false) {\n                _.$slideTrack.animate({\n                    left: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            } else {\n                _.$slideTrack.animate({\n                    top: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            }\n\n        } else {\n\n            if (_.cssTransitions === false) {\n                if (_.options.rtl === true) {\n                    _.currentLeft = -(_.currentLeft);\n                }\n                $({\n                    animStart: _.currentLeft\n                }).animate({\n                    animStart: targetLeft\n                }, {\n                    duration: _.options.speed,\n                    easing: _.options.easing,\n                    step: function(now) {\n                        now = Math.ceil(now);\n                        if (_.options.vertical === false) {\n                            animProps[_.animType] = 'translate(' +\n                                now + 'px, 0px)';\n                            _.$slideTrack.css(animProps);\n                        } else {\n                            animProps[_.animType] = 'translate(0px,' +\n                                now + 'px)';\n                            _.$slideTrack.css(animProps);\n                        }\n                    },\n                    complete: function() {\n                        if (callback) {\n                            callback.call();\n                        }\n                    }\n                });\n\n            } else {\n\n                _.applyTransition();\n                targetLeft = Math.ceil(targetLeft);\n\n                if (_.options.vertical === false) {\n                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\n                } else {\n                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\n                }\n                _.$slideTrack.css(animProps);\n\n                if (callback) {\n                    setTimeout(function() {\n\n                        _.disableTransition();\n\n                        callback.call();\n                    }, _.options.speed);\n                }\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.getNavTarget = function() {\n\n        var _ = this,\n            asNavFor = _.options.asNavFor;\n\n        if ( asNavFor && asNavFor !== null ) {\n            asNavFor = $(asNavFor).not(_.$slider);\n        }\n\n        return asNavFor;\n\n    };\n\n    Slick.prototype.asNavFor = function(index) {\n\n        var _ = this,\n            asNavFor = _.getNavTarget();\n\n        if ( asNavFor !== null && typeof asNavFor === 'object' ) {\n            asNavFor.each(function() {\n                var target = $(this).slick('getSlick');\n                if(!target.unslicked) {\n                    target.slideHandler(index, true);\n                }\n            });\n        }\n\n    };\n\n    Slick.prototype.applyTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        if (_.options.fade === false) {\n            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\n        } else {\n            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\n        }\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.autoPlay = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        if ( _.slideCount > _.options.slidesToShow ) {\n            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );\n        }\n\n    };\n\n    Slick.prototype.autoPlayClear = function() {\n\n        var _ = this;\n\n        if (_.autoPlayTimer) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n    };\n\n    Slick.prototype.autoPlayIterator = function() {\n\n        var _ = this,\n            slideTo = _.currentSlide + _.options.slidesToScroll;\n\n        if ( !_.paused && !_.interrupted && !_.focussed ) {\n\n            if ( _.options.infinite === false ) {\n\n                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {\n                    _.direction = 0;\n                }\n\n                else if ( _.direction === 0 ) {\n\n                    slideTo = _.currentSlide - _.options.slidesToScroll;\n\n                    if ( _.currentSlide - 1 === 0 ) {\n                        _.direction = 1;\n                    }\n\n                }\n\n            }\n\n            _.slideHandler( slideTo );\n\n        }\n\n    };\n\n    Slick.prototype.buildArrows = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true ) {\n\n            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\n            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\n\n            if( _.slideCount > _.options.slidesToShow ) {\n\n                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n                if (_.htmlExpr.test(_.options.prevArrow)) {\n                    _.$prevArrow.prependTo(_.options.appendArrows);\n                }\n\n                if (_.htmlExpr.test(_.options.nextArrow)) {\n                    _.$nextArrow.appendTo(_.options.appendArrows);\n                }\n\n                if (_.options.infinite !== true) {\n                    _.$prevArrow\n                        .addClass('slick-disabled')\n                        .attr('aria-disabled', 'true');\n                }\n\n            } else {\n\n                _.$prevArrow.add( _.$nextArrow )\n\n                    .addClass('slick-hidden')\n                    .attr({\n                        'aria-disabled': 'true',\n                        'tabindex': '-1'\n                    });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.buildDots = function() {\n\n        var _ = this,\n            i, dot;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$slider.addClass('slick-dotted');\n\n            dot = $('<ul />').addClass(_.options.dotsClass);\n\n            for (i = 0; i <= _.getDotCount(); i += 1) {\n                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\n            }\n\n            _.$dots = dot.appendTo(_.options.appendDots);\n\n            _.$dots.find('li').first().addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.buildOut = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slider\n                .children( _.options.slide + ':not(.slick-cloned)')\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        _.$slides.each(function(index, element) {\n            $(element)\n                .attr('data-slick-index', index)\n                .data('originalStyling', $(element).attr('style') || '');\n        });\n\n        _.$slider.addClass('slick-slider');\n\n        _.$slideTrack = (_.slideCount === 0) ?\n            $('<div class=\"slick-track\"/>').appendTo(_.$slider) :\n            _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\n\n        _.$list = _.$slideTrack.wrap(\n            '<div class=\"slick-list\"/>').parent();\n        _.$slideTrack.css('opacity', 0);\n\n        if (_.options.centerMode === true || _.options.swipeToSlide === true) {\n            _.options.slidesToScroll = 1;\n        }\n\n        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\n\n        _.setupInfinite();\n\n        _.buildArrows();\n\n        _.buildDots();\n\n        _.updateDots();\n\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        if (_.options.draggable === true) {\n            _.$list.addClass('draggable');\n        }\n\n    };\n\n    Slick.prototype.buildRows = function() {\n\n        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;\n\n        newSlides = document.createDocumentFragment();\n        originalSlides = _.$slider.children();\n\n        if(_.options.rows > 0) {\n\n            slidesPerSection = _.options.slidesPerRow * _.options.rows;\n            numOfSlides = Math.ceil(\n                originalSlides.length / slidesPerSection\n            );\n\n            for(a = 0; a < numOfSlides; a++){\n                var slide = document.createElement('div');\n                for(b = 0; b < _.options.rows; b++) {\n                    var row = document.createElement('div');\n                    for(c = 0; c < _.options.slidesPerRow; c++) {\n                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));\n                        if (originalSlides.get(target)) {\n                            row.appendChild(originalSlides.get(target));\n                        }\n                    }\n                    slide.appendChild(row);\n                }\n                newSlides.appendChild(slide);\n            }\n\n            _.$slider.empty().append(newSlides);\n            _.$slider.children().children().children()\n                .css({\n                    'width':(100 / _.options.slidesPerRow) + '%',\n                    'display': 'inline-block'\n                });\n\n        }\n\n    };\n\n    Slick.prototype.checkResponsive = function(initial, forceUpdate) {\n\n        var _ = this,\n            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;\n        var sliderWidth = _.$slider.width();\n        var windowWidth = window.innerWidth || $(window).width();\n\n        if (_.respondTo === 'window') {\n            respondToWidth = windowWidth;\n        } else if (_.respondTo === 'slider') {\n            respondToWidth = sliderWidth;\n        } else if (_.respondTo === 'min') {\n            respondToWidth = Math.min(windowWidth, sliderWidth);\n        }\n\n        if ( _.options.responsive &&\n            _.options.responsive.length &&\n            _.options.responsive !== null) {\n\n            targetBreakpoint = null;\n\n            for (breakpoint in _.breakpoints) {\n                if (_.breakpoints.hasOwnProperty(breakpoint)) {\n                    if (_.originalSettings.mobileFirst === false) {\n                        if (respondToWidth < _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    } else {\n                        if (respondToWidth > _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    }\n                }\n            }\n\n            if (targetBreakpoint !== null) {\n                if (_.activeBreakpoint !== null) {\n                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\n                        _.activeBreakpoint =\n                            targetBreakpoint;\n                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                            _.unslick(targetBreakpoint);\n                        } else {\n                            _.options = $.extend({}, _.originalSettings,\n                                _.breakpointSettings[\n                                    targetBreakpoint]);\n                            if (initial === true) {\n                                _.currentSlide = _.options.initialSlide;\n                            }\n                            _.refresh(initial);\n                        }\n                        triggerBreakpoint = targetBreakpoint;\n                    }\n                } else {\n                    _.activeBreakpoint = targetBreakpoint;\n                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                        _.unslick(targetBreakpoint);\n                    } else {\n                        _.options = $.extend({}, _.originalSettings,\n                            _.breakpointSettings[\n                                targetBreakpoint]);\n                        if (initial === true) {\n                            _.currentSlide = _.options.initialSlide;\n                        }\n                        _.refresh(initial);\n                    }\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            } else {\n                if (_.activeBreakpoint !== null) {\n                    _.activeBreakpoint = null;\n                    _.options = _.originalSettings;\n                    if (initial === true) {\n                        _.currentSlide = _.options.initialSlide;\n                    }\n                    _.refresh(initial);\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            }\n\n            // only trigger breakpoints during an actual break. not on initialize.\n            if( !initial && triggerBreakpoint !== false ) {\n                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\n            }\n        }\n\n    };\n\n    Slick.prototype.changeSlide = function(event, dontAnimate) {\n\n        var _ = this,\n            $target = $(event.currentTarget),\n            indexOffset, slideOffset, unevenOffset;\n\n        // If target is a link, prevent default action.\n        if($target.is('a')) {\n            event.preventDefault();\n        }\n\n        // If target is not the <li> element (ie: a child), find the <li>.\n        if(!$target.is('li')) {\n            $target = $target.closest('li');\n        }\n\n        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);\n        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\n\n        switch (event.data.message) {\n\n            case 'previous':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'next':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'index':\n                var index = event.data.index === 0 ? 0 :\n                    event.data.index || $target.index() * _.options.slidesToScroll;\n\n                _.slideHandler(_.checkNavigable(index), false, dontAnimate);\n                $target.children().trigger('focus');\n                break;\n\n            default:\n                return;\n        }\n\n    };\n\n    Slick.prototype.checkNavigable = function(index) {\n\n        var _ = this,\n            navigables, prevNavigable;\n\n        navigables = _.getNavigableIndexes();\n        prevNavigable = 0;\n        if (index > navigables[navigables.length - 1]) {\n            index = navigables[navigables.length - 1];\n        } else {\n            for (var n in navigables) {\n                if (index < navigables[n]) {\n                    index = prevNavigable;\n                    break;\n                }\n                prevNavigable = navigables[n];\n            }\n        }\n\n        return index;\n    };\n\n    Slick.prototype.cleanUpEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots && _.$dots !== null) {\n\n            $('li', _.$dots)\n                .off('click.slick', _.changeSlide)\n                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n            if (_.options.accessibility === true) {\n                _.$dots.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$slider.off('focus.slick blur.slick');\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\n            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\n                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\n        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\n        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\n        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\n\n        _.$list.off('click.slick', _.clickHandler);\n\n        $(document).off(_.visibilityChange, _.visibility);\n\n        _.cleanUpSlideEvents();\n\n        if (_.options.accessibility === true) {\n            _.$list.off('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().off('click.slick', _.selectHandler);\n        }\n\n        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\n\n        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\n\n        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\n\n        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\n\n    };\n\n    Slick.prototype.cleanUpSlideEvents = function() {\n\n        var _ = this;\n\n        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\n        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n    };\n\n    Slick.prototype.cleanUpRows = function() {\n\n        var _ = this, originalSlides;\n\n        if(_.options.rows > 0) {\n            originalSlides = _.$slides.children().children();\n            originalSlides.removeAttr('style');\n            _.$slider.empty().append(originalSlides);\n        }\n\n    };\n\n    Slick.prototype.clickHandler = function(event) {\n\n        var _ = this;\n\n        if (_.shouldClick === false) {\n            event.stopImmediatePropagation();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n    };\n\n    Slick.prototype.destroy = function(refresh) {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        _.touchObject = {};\n\n        _.cleanUpEvents();\n\n        $('.slick-cloned', _.$slider).detach();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if ( _.$prevArrow && _.$prevArrow.length ) {\n\n            _.$prevArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.prevArrow )) {\n                _.$prevArrow.remove();\n            }\n        }\n\n        if ( _.$nextArrow && _.$nextArrow.length ) {\n\n            _.$nextArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.nextArrow )) {\n                _.$nextArrow.remove();\n            }\n        }\n\n\n        if (_.$slides) {\n\n            _.$slides\n                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')\n                .removeAttr('aria-hidden')\n                .removeAttr('data-slick-index')\n                .each(function(){\n                    $(this).attr('style', $(this).data('originalStyling'));\n                });\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slideTrack.detach();\n\n            _.$list.detach();\n\n            _.$slider.append(_.$slides);\n        }\n\n        _.cleanUpRows();\n\n        _.$slider.removeClass('slick-slider');\n        _.$slider.removeClass('slick-initialized');\n        _.$slider.removeClass('slick-dotted');\n\n        _.unslicked = true;\n\n        if(!refresh) {\n            _.$slider.trigger('destroy', [_]);\n        }\n\n    };\n\n    Slick.prototype.disableTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        transition[_.transitionType] = '';\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.fadeSlide = function(slideIndex, callback) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).css({\n                zIndex: _.options.zIndex\n            });\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 1\n            }, _.options.speed, _.options.easing, callback);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 1,\n                zIndex: _.options.zIndex\n            });\n\n            if (callback) {\n                setTimeout(function() {\n\n                    _.disableTransition(slideIndex);\n\n                    callback.call();\n                }, _.options.speed);\n            }\n\n        }\n\n    };\n\n    Slick.prototype.fadeSlideOut = function(slideIndex) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            }, _.options.speed, _.options.easing);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            });\n\n        }\n\n    };\n\n    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {\n\n        var _ = this;\n\n        if (filter !== null) {\n\n            _.$slidesCache = _.$slides;\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.focusHandler = function() {\n\n        var _ = this;\n\n        _.$slider\n            .off('focus.slick blur.slick')\n            .on('focus.slick blur.slick', '*', function(event) {\n\n            event.stopImmediatePropagation();\n            var $sf = $(this);\n\n            setTimeout(function() {\n\n                if( _.options.pauseOnFocus ) {\n                    _.focussed = $sf.is(':focus');\n                    _.autoPlay();\n                }\n\n            }, 0);\n\n        });\n    };\n\n    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {\n\n        var _ = this;\n        return _.currentSlide;\n\n    };\n\n    Slick.prototype.getDotCount = function() {\n\n        var _ = this;\n\n        var breakPoint = 0;\n        var counter = 0;\n        var pagerQty = 0;\n\n        if (_.options.infinite === true) {\n            if (_.slideCount <= _.options.slidesToShow) {\n                 ++pagerQty;\n            } else {\n                while (breakPoint < _.slideCount) {\n                    ++pagerQty;\n                    breakPoint = counter + _.options.slidesToScroll;\n                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n                }\n            }\n        } else if (_.options.centerMode === true) {\n            pagerQty = _.slideCount;\n        } else if(!_.options.asNavFor) {\n            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\n        }else {\n            while (breakPoint < _.slideCount) {\n                ++pagerQty;\n                breakPoint = counter + _.options.slidesToScroll;\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n            }\n        }\n\n        return pagerQty - 1;\n\n    };\n\n    Slick.prototype.getLeft = function(slideIndex) {\n\n        var _ = this,\n            targetLeft,\n            verticalHeight,\n            verticalOffset = 0,\n            targetSlide,\n            coef;\n\n        _.slideOffset = 0;\n        verticalHeight = _.$slides.first().outerHeight(true);\n\n        if (_.options.infinite === true) {\n            if (_.slideCount > _.options.slidesToShow) {\n                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\n                coef = -1\n\n                if (_.options.vertical === true && _.options.centerMode === true) {\n                    if (_.options.slidesToShow === 2) {\n                        coef = -1.5;\n                    } else if (_.options.slidesToShow === 1) {\n                        coef = -2\n                    }\n                }\n                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;\n            }\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\n                    if (slideIndex > _.slideCount) {\n                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\n                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\n                    } else {\n                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\n                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\n                    }\n                }\n            }\n        } else {\n            if (slideIndex + _.options.slidesToShow > _.slideCount) {\n                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\n                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\n            }\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = 0;\n            verticalOffset = 0;\n        }\n\n        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);\n        } else if (_.options.centerMode === true && _.options.infinite === true) {\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\n        } else if (_.options.centerMode === true) {\n            _.slideOffset = 0;\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\n        }\n\n        if (_.options.vertical === false) {\n            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\n        } else {\n            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\n        }\n\n        if (_.options.variableWidth === true) {\n\n            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n            } else {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\n            }\n\n            if (_.options.rtl === true) {\n                if (targetSlide[0]) {\n                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                } else {\n                    targetLeft =  0;\n                }\n            } else {\n                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n            }\n\n            if (_.options.centerMode === true) {\n                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n                } else {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\n                }\n\n                if (_.options.rtl === true) {\n                    if (targetSlide[0]) {\n                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                    } else {\n                        targetLeft =  0;\n                    }\n                } else {\n                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n                }\n\n                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\n            }\n        }\n\n        return targetLeft;\n\n    };\n\n    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {\n\n        var _ = this;\n\n        return _.options[option];\n\n    };\n\n    Slick.prototype.getNavigableIndexes = function() {\n\n        var _ = this,\n            breakPoint = 0,\n            counter = 0,\n            indexes = [],\n            max;\n\n        if (_.options.infinite === false) {\n            max = _.slideCount;\n        } else {\n            breakPoint = _.options.slidesToScroll * -1;\n            counter = _.options.slidesToScroll * -1;\n            max = _.slideCount * 2;\n        }\n\n        while (breakPoint < max) {\n            indexes.push(breakPoint);\n            breakPoint = counter + _.options.slidesToScroll;\n            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n        }\n\n        return indexes;\n\n    };\n\n    Slick.prototype.getSlick = function() {\n\n        return this;\n\n    };\n\n    Slick.prototype.getSlideCount = function() {\n\n        var _ = this,\n            slidesTraversed, swipedSlide, centerOffset;\n\n        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\n\n        if (_.options.swipeToSlide === true) {\n            _.$slideTrack.find('.slick-slide').each(function(index, slide) {\n                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\n                    swipedSlide = slide;\n                    return false;\n                }\n            });\n\n            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\n\n            return slidesTraversed;\n\n        } else {\n            return _.options.slidesToScroll;\n        }\n\n    };\n\n    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'index',\n                index: parseInt(slide)\n            }\n        }, dontAnimate);\n\n    };\n\n    Slick.prototype.init = function(creation) {\n\n        var _ = this;\n\n        if (!$(_.$slider).hasClass('slick-initialized')) {\n\n            $(_.$slider).addClass('slick-initialized');\n\n            _.buildRows();\n            _.buildOut();\n            _.setProps();\n            _.startLoad();\n            _.loadSlider();\n            _.initializeEvents();\n            _.updateArrows();\n            _.updateDots();\n            _.checkResponsive(true);\n            _.focusHandler();\n\n        }\n\n        if (creation) {\n            _.$slider.trigger('init', [_]);\n        }\n\n        if (_.options.accessibility === true) {\n            _.initADA();\n        }\n\n        if ( _.options.autoplay ) {\n\n            _.paused = false;\n            _.autoPlay();\n\n        }\n\n    };\n\n    Slick.prototype.initADA = function() {\n        var _ = this,\n                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\n                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {\n                    return (val >= 0) && (val < _.slideCount);\n                });\n\n        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\n            'aria-hidden': 'true',\n            'tabindex': '-1'\n        }).find('a, input, button, select').attr({\n            'tabindex': '-1'\n        });\n\n        if (_.$dots !== null) {\n            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {\n                var slideControlIndex = tabControlIndexes.indexOf(i);\n\n                $(this).attr({\n                    'role': 'tabpanel',\n                    'id': 'slick-slide' + _.instanceUid + i,\n                    'tabindex': -1\n                });\n\n                if (slideControlIndex !== -1) {\n                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex\n                   if ($('#' + ariaButtonControl).length) {\n                     $(this).attr({\n                         'aria-describedby': ariaButtonControl\n                     });\n                   }\n                }\n            });\n\n            _.$dots.attr('role', 'tablist').find('li').each(function(i) {\n                var mappedSlideIndex = tabControlIndexes[i];\n\n                $(this).attr({\n                    'role': 'presentation'\n                });\n\n                $(this).find('button').first().attr({\n                    'role': 'tab',\n                    'id': 'slick-slide-control' + _.instanceUid + i,\n                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\n                    'aria-label': (i + 1) + ' of ' + numDotGroups,\n                    'aria-selected': null,\n                    'tabindex': '-1'\n                });\n\n            }).eq(_.currentSlide).find('button').attr({\n                'aria-selected': 'true',\n                'tabindex': '0'\n            }).end();\n        }\n\n        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {\n          if (_.options.focusOnChange) {\n            _.$slides.eq(i).attr({'tabindex': '0'});\n          } else {\n            _.$slides.eq(i).removeAttr('tabindex');\n          }\n        }\n\n        _.activateADA();\n\n    };\n\n    Slick.prototype.initArrowEvents = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'previous'\n               }, _.changeSlide);\n            _.$nextArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'next'\n               }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow.on('keydown.slick', _.keyHandler);\n                _.$nextArrow.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n    };\n\n    Slick.prototype.initDotEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n            $('li', _.$dots).on('click.slick', {\n                message: 'index'\n            }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$dots.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {\n\n            $('li', _.$dots)\n                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initSlideEvents = function() {\n\n        var _ = this;\n\n        if ( _.options.pauseOnHover ) {\n\n            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\n            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initializeEvents = function() {\n\n        var _ = this;\n\n        _.initArrowEvents();\n\n        _.initDotEvents();\n        _.initSlideEvents();\n\n        _.$list.on('touchstart.slick mousedown.slick', {\n            action: 'start'\n        }, _.swipeHandler);\n        _.$list.on('touchmove.slick mousemove.slick', {\n            action: 'move'\n        }, _.swipeHandler);\n        _.$list.on('touchend.slick mouseup.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n        _.$list.on('touchcancel.slick mouseleave.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n\n        _.$list.on('click.slick', _.clickHandler);\n\n        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\n\n        if (_.options.accessibility === true) {\n            _.$list.on('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\n\n        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\n\n        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\n\n        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\n        $(_.setPosition);\n\n    };\n\n    Slick.prototype.initUI = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.show();\n            _.$nextArrow.show();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.show();\n\n        }\n\n    };\n\n    Slick.prototype.keyHandler = function(event) {\n\n        var _ = this;\n         //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n            if (event.keyCode === 37 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'next' :  'previous'\n                    }\n                });\n            } else if (event.keyCode === 39 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'previous' : 'next'\n                    }\n                });\n            }\n        }\n\n    };\n\n    Slick.prototype.lazyLoad = function() {\n\n        var _ = this,\n            loadRange, cloneRange, rangeStart, rangeEnd;\n\n        function loadImages(imagesScope) {\n\n            $('img[data-lazy]', imagesScope).each(function() {\n\n                var image = $(this),\n                    imageSource = $(this).attr('data-lazy'),\n                    imageSrcSet = $(this).attr('data-srcset'),\n                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\n                    imageToLoad = document.createElement('img');\n\n                imageToLoad.onload = function() {\n\n                    image\n                        .animate({ opacity: 0 }, 100, function() {\n\n                            if (imageSrcSet) {\n                                image\n                                    .attr('srcset', imageSrcSet );\n\n                                if (imageSizes) {\n                                    image\n                                        .attr('sizes', imageSizes );\n                                }\n                            }\n\n                            image\n                                .attr('src', imageSource)\n                                .animate({ opacity: 1 }, 200, function() {\n                                    image\n                                        .removeAttr('data-lazy data-srcset data-sizes')\n                                        .removeClass('slick-loading');\n                                });\n                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n                        });\n\n                };\n\n                imageToLoad.onerror = function() {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                };\n\n                imageToLoad.src = imageSource;\n\n            });\n\n        }\n\n        if (_.options.centerMode === true) {\n            if (_.options.infinite === true) {\n                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\n                rangeEnd = rangeStart + _.options.slidesToShow + 2;\n            } else {\n                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\n                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\n            }\n        } else {\n            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\n            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\n            if (_.options.fade === true) {\n                if (rangeStart > 0) rangeStart--;\n                if (rangeEnd <= _.slideCount) rangeEnd++;\n            }\n        }\n\n        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\n\n        if (_.options.lazyLoad === 'anticipated') {\n            var prevSlide = rangeStart - 1,\n                nextSlide = rangeEnd,\n                $slides = _.$slider.find('.slick-slide');\n\n            for (var i = 0; i < _.options.slidesToScroll; i++) {\n                if (prevSlide < 0) prevSlide = _.slideCount - 1;\n                loadRange = loadRange.add($slides.eq(prevSlide));\n                loadRange = loadRange.add($slides.eq(nextSlide));\n                prevSlide--;\n                nextSlide++;\n            }\n        }\n\n        loadImages(loadRange);\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-slide');\n            loadImages(cloneRange);\n        } else\n        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\n            loadImages(cloneRange);\n        } else if (_.currentSlide === 0) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\n            loadImages(cloneRange);\n        }\n\n    };\n\n    Slick.prototype.loadSlider = function() {\n\n        var _ = this;\n\n        _.setPosition();\n\n        _.$slideTrack.css({\n            opacity: 1\n        });\n\n        _.$slider.removeClass('slick-loading');\n\n        _.initUI();\n\n        if (_.options.lazyLoad === 'progressive') {\n            _.progressiveLazyLoad();\n        }\n\n    };\n\n    Slick.prototype.next = Slick.prototype.slickNext = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'next'\n            }\n        });\n\n    };\n\n    Slick.prototype.orientationChange = function() {\n\n        var _ = this;\n\n        _.checkResponsive();\n        _.setPosition();\n\n    };\n\n    Slick.prototype.pause = Slick.prototype.slickPause = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n        _.paused = true;\n\n    };\n\n    Slick.prototype.play = Slick.prototype.slickPlay = function() {\n\n        var _ = this;\n\n        _.autoPlay();\n        _.options.autoplay = true;\n        _.paused = false;\n        _.focussed = false;\n        _.interrupted = false;\n\n    };\n\n    Slick.prototype.postSlide = function(index) {\n\n        var _ = this;\n\n        if( !_.unslicked ) {\n\n            _.$slider.trigger('afterChange', [_, index]);\n\n            _.animating = false;\n\n            if (_.slideCount > _.options.slidesToShow) {\n                _.setPosition();\n            }\n\n            _.swipeLeft = null;\n\n            if ( _.options.autoplay ) {\n                _.autoPlay();\n            }\n\n            if (_.options.accessibility === true) {\n                _.initADA();\n\n                if (_.options.focusOnChange) {\n                    var $currentSlide = $(_.$slides.get(_.currentSlide));\n                    $currentSlide.attr('tabindex', 0).focus();\n                }\n            }\n\n        }\n\n    };\n\n    Slick.prototype.prev = Slick.prototype.slickPrev = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'previous'\n            }\n        });\n\n    };\n\n    Slick.prototype.preventDefault = function(event) {\n\n        event.preventDefault();\n\n    };\n\n    Slick.prototype.progressiveLazyLoad = function( tryCount ) {\n\n        tryCount = tryCount || 1;\n\n        var _ = this,\n            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),\n            image,\n            imageSource,\n            imageSrcSet,\n            imageSizes,\n            imageToLoad;\n\n        if ( $imgsToLoad.length ) {\n\n            image = $imgsToLoad.first();\n            imageSource = image.attr('data-lazy');\n            imageSrcSet = image.attr('data-srcset');\n            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');\n            imageToLoad = document.createElement('img');\n\n            imageToLoad.onload = function() {\n\n                if (imageSrcSet) {\n                    image\n                        .attr('srcset', imageSrcSet );\n\n                    if (imageSizes) {\n                        image\n                            .attr('sizes', imageSizes );\n                    }\n                }\n\n                image\n                    .attr( 'src', imageSource )\n                    .removeAttr('data-lazy data-srcset data-sizes')\n                    .removeClass('slick-loading');\n\n                if ( _.options.adaptiveHeight === true ) {\n                    _.setPosition();\n                }\n\n                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);\n                _.progressiveLazyLoad();\n\n            };\n\n            imageToLoad.onerror = function() {\n\n                if ( tryCount < 3 ) {\n\n                    /**\n                     * try to load the image 3 times,\n                     * leave a slight delay so we don't get\n                     * servers blocking the request.\n                     */\n                    setTimeout( function() {\n                        _.progressiveLazyLoad( tryCount + 1 );\n                    }, 500 );\n\n                } else {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                    _.progressiveLazyLoad();\n\n                }\n\n            };\n\n            imageToLoad.src = imageSource;\n\n        } else {\n\n            _.$slider.trigger('allImagesLoaded', [ _ ]);\n\n        }\n\n    };\n\n    Slick.prototype.refresh = function( initializing ) {\n\n        var _ = this, currentSlide, lastVisibleIndex;\n\n        lastVisibleIndex = _.slideCount - _.options.slidesToShow;\n\n        // in non-infinite sliders, we don't want to go past the\n        // last visible index.\n        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {\n            _.currentSlide = lastVisibleIndex;\n        }\n\n        // if less slides than to show, go to start.\n        if ( _.slideCount <= _.options.slidesToShow ) {\n            _.currentSlide = 0;\n\n        }\n\n        currentSlide = _.currentSlide;\n\n        _.destroy(true);\n\n        $.extend(_, _.initials, { currentSlide: currentSlide });\n\n        _.init();\n\n        if( !initializing ) {\n\n            _.changeSlide({\n                data: {\n                    message: 'index',\n                    index: currentSlide\n                }\n            }, false);\n\n        }\n\n    };\n\n    Slick.prototype.registerBreakpoints = function() {\n\n        var _ = this, breakpoint, currentBreakpoint, l,\n            responsiveSettings = _.options.responsive || null;\n\n        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {\n\n            _.respondTo = _.options.respondTo || 'window';\n\n            for ( breakpoint in responsiveSettings ) {\n\n                l = _.breakpoints.length-1;\n\n                if (responsiveSettings.hasOwnProperty(breakpoint)) {\n                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;\n\n                    // loop through the breakpoints and cut out any existing\n                    // ones with the same breakpoint number, we don't want dupes.\n                    while( l >= 0 ) {\n                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {\n                            _.breakpoints.splice(l,1);\n                        }\n                        l--;\n                    }\n\n                    _.breakpoints.push(currentBreakpoint);\n                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\n\n                }\n\n            }\n\n            _.breakpoints.sort(function(a, b) {\n                return ( _.options.mobileFirst ) ? a-b : b-a;\n            });\n\n        }\n\n    };\n\n    Slick.prototype.reinit = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slideTrack\n                .children(_.options.slide)\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\n            _.currentSlide = _.currentSlide - _.options.slidesToScroll;\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.currentSlide = 0;\n        }\n\n        _.registerBreakpoints();\n\n        _.setProps();\n        _.setupInfinite();\n        _.buildArrows();\n        _.updateArrows();\n        _.initArrowEvents();\n        _.buildDots();\n        _.updateDots();\n        _.initDotEvents();\n        _.cleanUpSlideEvents();\n        _.initSlideEvents();\n\n        _.checkResponsive(false, true);\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        _.setPosition();\n        _.focusHandler();\n\n        _.paused = !_.options.autoplay;\n        _.autoPlay();\n\n        _.$slider.trigger('reInit', [_]);\n\n    };\n\n    Slick.prototype.resize = function() {\n\n        var _ = this;\n\n        if ($(window).width() !== _.windowWidth) {\n            clearTimeout(_.windowDelay);\n            _.windowDelay = window.setTimeout(function() {\n                _.windowWidth = $(window).width();\n                _.checkResponsive();\n                if( !_.unslicked ) { _.setPosition(); }\n            }, 50);\n        }\n    };\n\n    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            removeBefore = index;\n            index = removeBefore === true ? 0 : _.slideCount - 1;\n        } else {\n            index = removeBefore === true ? --index : index;\n        }\n\n        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\n            return false;\n        }\n\n        _.unload();\n\n        if (removeAll === true) {\n            _.$slideTrack.children().remove();\n        } else {\n            _.$slideTrack.children(this.options.slide).eq(index).remove();\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.setCSS = function(position) {\n\n        var _ = this,\n            positionProps = {},\n            x, y;\n\n        if (_.options.rtl === true) {\n            position = -position;\n        }\n        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\n        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\n\n        positionProps[_.positionProp] = position;\n\n        if (_.transformsEnabled === false) {\n            _.$slideTrack.css(positionProps);\n        } else {\n            positionProps = {};\n            if (_.cssTransitions === false) {\n                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\n                _.$slideTrack.css(positionProps);\n            } else {\n                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\n                _.$slideTrack.css(positionProps);\n            }\n        }\n\n    };\n\n    Slick.prototype.setDimensions = function() {\n\n        var _ = this;\n\n        if (_.options.vertical === false) {\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: ('0px ' + _.options.centerPadding)\n                });\n            }\n        } else {\n            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: (_.options.centerPadding + ' 0px')\n                });\n            }\n        }\n\n        _.listWidth = _.$list.width();\n        _.listHeight = _.$list.height();\n\n\n        if (_.options.vertical === false && _.options.variableWidth === false) {\n            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\n            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));\n\n        } else if (_.options.variableWidth === true) {\n            _.$slideTrack.width(5000 * _.slideCount);\n        } else {\n            _.slideWidth = Math.ceil(_.listWidth);\n            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));\n        }\n\n        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\n        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\n\n    };\n\n    Slick.prototype.setFade = function() {\n\n        var _ = this,\n            targetLeft;\n\n        _.$slides.each(function(index, element) {\n            targetLeft = (_.slideWidth * index) * -1;\n            if (_.options.rtl === true) {\n                $(element).css({\n                    position: 'relative',\n                    right: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            } else {\n                $(element).css({\n                    position: 'relative',\n                    left: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            }\n        });\n\n        _.$slides.eq(_.currentSlide).css({\n            zIndex: _.options.zIndex - 1,\n            opacity: 1\n        });\n\n    };\n\n    Slick.prototype.setHeight = function() {\n\n        var _ = this;\n\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.css('height', targetHeight);\n        }\n\n    };\n\n    Slick.prototype.setOption =\n    Slick.prototype.slickSetOption = function() {\n\n        /**\n         * accepts arguments in format of:\n         *\n         *  - for changing a single option's value:\n         *     .slick(\"setOption\", option, value, refresh )\n         *\n         *  - for changing a set of responsive options:\n         *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n         *\n         *  - for updating multiple values at once (not responsive)\n         *     .slick(\"setOption\", { 'option': value, ... }, refresh )\n         */\n\n        var _ = this, l, item, option, value, refresh = false, type;\n\n        if( $.type( arguments[0] ) === 'object' ) {\n\n            option =  arguments[0];\n            refresh = arguments[1];\n            type = 'multiple';\n\n        } else if ( $.type( arguments[0] ) === 'string' ) {\n\n            option =  arguments[0];\n            value = arguments[1];\n            refresh = arguments[2];\n\n            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {\n\n                type = 'responsive';\n\n            } else if ( typeof arguments[1] !== 'undefined' ) {\n\n                type = 'single';\n\n            }\n\n        }\n\n        if ( type === 'single' ) {\n\n            _.options[option] = value;\n\n\n        } else if ( type === 'multiple' ) {\n\n            $.each( option , function( opt, val ) {\n\n                _.options[opt] = val;\n\n            });\n\n\n        } else if ( type === 'responsive' ) {\n\n            for ( item in value ) {\n\n                if( $.type( _.options.responsive ) !== 'array' ) {\n\n                    _.options.responsive = [ value[item] ];\n\n                } else {\n\n                    l = _.options.responsive.length-1;\n\n                    // loop through the responsive object and splice out duplicates.\n                    while( l >= 0 ) {\n\n                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {\n\n                            _.options.responsive.splice(l,1);\n\n                        }\n\n                        l--;\n\n                    }\n\n                    _.options.responsive.push( value[item] );\n\n                }\n\n            }\n\n        }\n\n        if ( refresh ) {\n\n            _.unload();\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.setPosition = function() {\n\n        var _ = this;\n\n        _.setDimensions();\n\n        _.setHeight();\n\n        if (_.options.fade === false) {\n            _.setCSS(_.getLeft(_.currentSlide));\n        } else {\n            _.setFade();\n        }\n\n        _.$slider.trigger('setPosition', [_]);\n\n    };\n\n    Slick.prototype.setProps = function() {\n\n        var _ = this,\n            bodyStyle = document.body.style;\n\n        _.positionProp = _.options.vertical === true ? 'top' : 'left';\n\n        if (_.positionProp === 'top') {\n            _.$slider.addClass('slick-vertical');\n        } else {\n            _.$slider.removeClass('slick-vertical');\n        }\n\n        if (bodyStyle.WebkitTransition !== undefined ||\n            bodyStyle.MozTransition !== undefined ||\n            bodyStyle.msTransition !== undefined) {\n            if (_.options.useCSS === true) {\n                _.cssTransitions = true;\n            }\n        }\n\n        if ( _.options.fade ) {\n            if ( typeof _.options.zIndex === 'number' ) {\n                if( _.options.zIndex < 3 ) {\n                    _.options.zIndex = 3;\n                }\n            } else {\n                _.options.zIndex = _.defaults.zIndex;\n            }\n        }\n\n        if (bodyStyle.OTransform !== undefined) {\n            _.animType = 'OTransform';\n            _.transformType = '-o-transform';\n            _.transitionType = 'OTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.MozTransform !== undefined) {\n            _.animType = 'MozTransform';\n            _.transformType = '-moz-transform';\n            _.transitionType = 'MozTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.webkitTransform !== undefined) {\n            _.animType = 'webkitTransform';\n            _.transformType = '-webkit-transform';\n            _.transitionType = 'webkitTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.msTransform !== undefined) {\n            _.animType = 'msTransform';\n            _.transformType = '-ms-transform';\n            _.transitionType = 'msTransition';\n            if (bodyStyle.msTransform === undefined) _.animType = false;\n        }\n        if (bodyStyle.transform !== undefined && _.animType !== false) {\n            _.animType = 'transform';\n            _.transformType = 'transform';\n            _.transitionType = 'transition';\n        }\n        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);\n    };\n\n\n    Slick.prototype.setSlideClasses = function(index) {\n\n        var _ = this,\n            centerOffset, allSlides, indexOffset, remainder;\n\n        allSlides = _.$slider\n            .find('.slick-slide')\n            .removeClass('slick-active slick-center slick-current')\n            .attr('aria-hidden', 'true');\n\n        _.$slides\n            .eq(index)\n            .addClass('slick-current');\n\n        if (_.options.centerMode === true) {\n\n            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\n\n            centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n            if (_.options.infinite === true) {\n\n                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {\n                    _.$slides\n                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    indexOffset = _.options.slidesToShow + index;\n                    allSlides\n                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n                if (index === 0) {\n\n                    allSlides\n                        .eq(allSlides.length - 1 - _.options.slidesToShow)\n                        .addClass('slick-center');\n\n                } else if (index === _.slideCount - 1) {\n\n                    allSlides\n                        .eq(_.options.slidesToShow)\n                        .addClass('slick-center');\n\n                }\n\n            }\n\n            _.$slides\n                .eq(index)\n                .addClass('slick-center');\n\n        } else {\n\n            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {\n\n                _.$slides\n                    .slice(index, index + _.options.slidesToShow)\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else if (allSlides.length <= _.options.slidesToShow) {\n\n                allSlides\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else {\n\n                remainder = _.slideCount % _.options.slidesToShow;\n                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\n\n                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {\n\n                    allSlides\n                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    allSlides\n                        .slice(indexOffset, indexOffset + _.options.slidesToShow)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n            }\n\n        }\n\n        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\n            _.lazyLoad();\n        }\n    };\n\n    Slick.prototype.setupInfinite = function() {\n\n        var _ = this,\n            i, slideIndex, infiniteCount;\n\n        if (_.options.fade === true) {\n            _.options.centerMode = false;\n        }\n\n        if (_.options.infinite === true && _.options.fade === false) {\n\n            slideIndex = null;\n\n            if (_.slideCount > _.options.slidesToShow) {\n\n                if (_.options.centerMode === true) {\n                    infiniteCount = _.options.slidesToShow + 1;\n                } else {\n                    infiniteCount = _.options.slidesToShow;\n                }\n\n                for (i = _.slideCount; i > (_.slideCount -\n                        infiniteCount); i -= 1) {\n                    slideIndex = i - 1;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex - _.slideCount)\n                        .prependTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {\n                    slideIndex = i;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex + _.slideCount)\n                        .appendTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {\n                    $(this).attr('id', '');\n                });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.interrupt = function( toggle ) {\n\n        var _ = this;\n\n        if( !toggle ) {\n            _.autoPlay();\n        }\n        _.interrupted = toggle;\n\n    };\n\n    Slick.prototype.selectHandler = function(event) {\n\n        var _ = this;\n\n        var targetElement =\n            $(event.target).is('.slick-slide') ?\n                $(event.target) :\n                $(event.target).parents('.slick-slide');\n\n        var index = parseInt(targetElement.attr('data-slick-index'));\n\n        if (!index) index = 0;\n\n        if (_.slideCount <= _.options.slidesToShow) {\n\n            _.slideHandler(index, false, true);\n            return;\n\n        }\n\n        _.slideHandler(index);\n\n    };\n\n    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {\n\n        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,\n            _ = this, navTarget;\n\n        sync = sync || false;\n\n        if (_.animating === true && _.options.waitForAnimate === true) {\n            return;\n        }\n\n        if (_.options.fade === true && _.currentSlide === index) {\n            return;\n        }\n\n        if (sync === false) {\n            _.asNavFor(index);\n        }\n\n        targetSlide = index;\n        targetLeft = _.getLeft(targetSlide);\n        slideLeft = _.getLeft(_.currentSlide);\n\n        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\n\n        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        }\n\n        if ( _.options.autoplay ) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n        if (targetSlide < 0) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);\n            } else {\n                animSlide = _.slideCount + targetSlide;\n            }\n        } else if (targetSlide >= _.slideCount) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = 0;\n            } else {\n                animSlide = targetSlide - _.slideCount;\n            }\n        } else {\n            animSlide = targetSlide;\n        }\n\n        _.animating = true;\n\n        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\n\n        oldSlide = _.currentSlide;\n        _.currentSlide = animSlide;\n\n        _.setSlideClasses(_.currentSlide);\n\n        if ( _.options.asNavFor ) {\n\n            navTarget = _.getNavTarget();\n            navTarget = navTarget.slick('getSlick');\n\n            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {\n                navTarget.setSlideClasses(_.currentSlide);\n            }\n\n        }\n\n        _.updateDots();\n        _.updateArrows();\n\n        if (_.options.fade === true) {\n            if (dontAnimate !== true) {\n\n                _.fadeSlideOut(oldSlide);\n\n                _.fadeSlide(animSlide, function() {\n                    _.postSlide(animSlide);\n                });\n\n            } else {\n                _.postSlide(animSlide);\n            }\n            _.animateHeight();\n            return;\n        }\n\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n            _.animateSlide(targetLeft, function() {\n                _.postSlide(animSlide);\n            });\n        } else {\n            _.postSlide(animSlide);\n        }\n\n    };\n\n    Slick.prototype.startLoad = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.hide();\n            _.$nextArrow.hide();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.hide();\n\n        }\n\n        _.$slider.addClass('slick-loading');\n\n    };\n\n    Slick.prototype.swipeDirection = function() {\n\n        var xDist, yDist, r, swipeAngle, _ = this;\n\n        xDist = _.touchObject.startX - _.touchObject.curX;\n        yDist = _.touchObject.startY - _.touchObject.curY;\n        r = Math.atan2(yDist, xDist);\n\n        swipeAngle = Math.round(r * 180 / Math.PI);\n        if (swipeAngle < 0) {\n            swipeAngle = 360 - Math.abs(swipeAngle);\n        }\n\n        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {\n            return (_.options.rtl === false ? 'right' : 'left');\n        }\n        if (_.options.verticalSwiping === true) {\n            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {\n                return 'down';\n            } else {\n                return 'up';\n            }\n        }\n\n        return 'vertical';\n\n    };\n\n    Slick.prototype.swipeEnd = function(event) {\n\n        var _ = this,\n            slideCount,\n            direction;\n\n        _.dragging = false;\n        _.swiping = false;\n\n        if (_.scrolling) {\n            _.scrolling = false;\n            return false;\n        }\n\n        _.interrupted = false;\n        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;\n\n        if ( _.touchObject.curX === undefined ) {\n            return false;\n        }\n\n        if ( _.touchObject.edgeHit === true ) {\n            _.$slider.trigger('edge', [_, _.swipeDirection() ]);\n        }\n\n        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {\n\n            direction = _.swipeDirection();\n\n            switch ( direction ) {\n\n                case 'left':\n                case 'down':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :\n                            _.currentSlide + _.getSlideCount();\n\n                    _.currentDirection = 0;\n\n                    break;\n\n                case 'right':\n                case 'up':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :\n                            _.currentSlide - _.getSlideCount();\n\n                    _.currentDirection = 1;\n\n                    break;\n\n                default:\n\n\n            }\n\n            if( direction != 'vertical' ) {\n\n                _.slideHandler( slideCount );\n                _.touchObject = {};\n                _.$slider.trigger('swipe', [_, direction ]);\n\n            }\n\n        } else {\n\n            if ( _.touchObject.startX !== _.touchObject.curX ) {\n\n                _.slideHandler( _.currentSlide );\n                _.touchObject = {};\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.swipeHandler = function(event) {\n\n        var _ = this;\n\n        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {\n            return;\n        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\n            return;\n        }\n\n        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?\n            event.originalEvent.touches.length : 1;\n\n        _.touchObject.minSwipe = _.listWidth / _.options\n            .touchThreshold;\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.minSwipe = _.listHeight / _.options\n                .touchThreshold;\n        }\n\n        switch (event.data.action) {\n\n            case 'start':\n                _.swipeStart(event);\n                break;\n\n            case 'move':\n                _.swipeMove(event);\n                break;\n\n            case 'end':\n                _.swipeEnd(event);\n                break;\n\n        }\n\n    };\n\n    Slick.prototype.swipeMove = function(event) {\n\n        var _ = this,\n            edgeWasHit = false,\n            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;\n\n        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\n\n        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\n            return false;\n        }\n\n        curLeft = _.getLeft(_.currentSlide);\n\n        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\n        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\n\n        _.touchObject.swipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\n\n        verticalSwipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\n\n        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\n            _.scrolling = true;\n            return false;\n        }\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.swipeLength = verticalSwipeLength;\n        }\n\n        swipeDirection = _.swipeDirection();\n\n        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\n            _.swiping = true;\n            event.preventDefault();\n        }\n\n        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\n        if (_.options.verticalSwiping === true) {\n            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\n        }\n\n\n        swipeLength = _.touchObject.swipeLength;\n\n        _.touchObject.edgeHit = false;\n\n        if (_.options.infinite === false) {\n            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {\n                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\n                _.touchObject.edgeHit = true;\n            }\n        }\n\n        if (_.options.vertical === false) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        } else {\n            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;\n        }\n        if (_.options.verticalSwiping === true) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        }\n\n        if (_.options.fade === true || _.options.touchMove === false) {\n            return false;\n        }\n\n        if (_.animating === true) {\n            _.swipeLeft = null;\n            return false;\n        }\n\n        _.setCSS(_.swipeLeft);\n\n    };\n\n    Slick.prototype.swipeStart = function(event) {\n\n        var _ = this,\n            touches;\n\n        _.interrupted = true;\n\n        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\n            _.touchObject = {};\n            return false;\n        }\n\n        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\n            touches = event.originalEvent.touches[0];\n        }\n\n        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\n        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\n\n        _.dragging = true;\n\n    };\n\n    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {\n\n        var _ = this;\n\n        if (_.$slidesCache !== null) {\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.unload = function() {\n\n        var _ = this;\n\n        $('.slick-cloned', _.$slider).remove();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\n            _.$prevArrow.remove();\n        }\n\n        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\n            _.$nextArrow.remove();\n        }\n\n        _.$slides\n            .removeClass('slick-slide slick-active slick-visible slick-current')\n            .attr('aria-hidden', 'true')\n            .css('width', '');\n\n    };\n\n    Slick.prototype.unslick = function(fromBreakpoint) {\n\n        var _ = this;\n        _.$slider.trigger('unslick', [_, fromBreakpoint]);\n        _.destroy();\n\n    };\n\n    Slick.prototype.updateArrows = function() {\n\n        var _ = this,\n            centerOffset;\n\n        centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n        if ( _.options.arrows === true &&\n            _.slideCount > _.options.slidesToShow &&\n            !_.options.infinite ) {\n\n            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            if (_.currentSlide === 0) {\n\n                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.updateDots = function() {\n\n        var _ = this;\n\n        if (_.$dots !== null) {\n\n            _.$dots\n                .find('li')\n                    .removeClass('slick-active')\n                    .end();\n\n            _.$dots\n                .find('li')\n                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))\n                .addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.visibility = function() {\n\n        var _ = this;\n\n        if ( _.options.autoplay ) {\n\n            if ( document[_.hidden] ) {\n\n                _.interrupted = true;\n\n            } else {\n\n                _.interrupted = false;\n\n            }\n\n        }\n\n    };\n\n    $.fn.slick = function() {\n        var _ = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            l = _.length,\n            i,\n            ret;\n        for (i = 0; i < l; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                _[i].slick = new Slick(_[i], opt);\n            else\n                ret = _[i].slick[opt].apply(_[i].slick, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return _;\n    };\n\n}));\n","function ScrollSpy (wrapper, opt) {\n\n  this.doc = document;\n  this.wrapper = (typeof wrapper === 'string') ? this.doc.querySelector(wrapper) : wrapper;\n  this.nav = this.wrapper.querySelectorAll(opt.nav);\n\n  this.contents = [];\n  this.win = window;\n\n  this.winH = this.win.innerHeight;\n\n  this.className = opt.className;\n\n  this.callback = opt.callback;\n\n  this.init();\n}\n\nScrollSpy.prototype.init = function () {\n  this.contents = this.getContents();\n  this.attachEvent();\n};\n\nScrollSpy.prototype.getContents = function () {\n  var targetList = [];\n\n  for (var i = 0, max = this.nav.length; i < max; i++) {\n    var href = this.nav[i].href;\n\n    targetList.push(this.doc.getElementById(href.split('#')[1]));\n  }\n\n  return targetList;\n};\n\nScrollSpy.prototype.attachEvent = function () {\n  this.win.addEventListener('load', (function () {\n    this.spy(this.callback);\n  }).bind(this));\n\n\n  var scrollingTimer;\n\n  this.win.addEventListener('scroll', (function () {\n    if (scrollingTimer) {\n      clearTimeout(scrollingTimer);\n    }\n\n    var _this = this;\n\n    scrollingTimer = setTimeout(function () {\n      _this.spy(_this.callback);\n    }, 10);\n  }).bind(this));\n\n\n  var resizingTimer;\n\n  this.win.addEventListener('resize', (function () {\n    if (resizingTimer) {\n      clearTimeout(resizingTimer);\n    }\n\n    var _this = this;\n\n    resizingTimer = setTimeout(function () {\n      _this.spy(_this.callback);\n    }, 10);\n  }).bind(this));\n};\n\nScrollSpy.prototype.spy = function (cb) {\n  var elems = this.getElemsViewState();\n\n  this.markNav(elems);\n\n  if (typeof cb === 'function') {\n    cb(elems);\n  }\n};\n\nScrollSpy.prototype.getElemsViewState = function () {\n  var elemsInView = [],\n    elemsOutView = [],\n    viewStatusList = [];\n\n  for (var i = 0, max = this.contents.length; i < max; i++) {\n    var currentContent = this.contents[i],\n      isInView = this.isInView(currentContent);\n\n    if (isInView) {\n      elemsInView.push(currentContent);\n    } else {\n      elemsOutView.push(currentContent);\n    }\n    viewStatusList.push(isInView);\n  }\n\n  return {\n    inView: elemsInView,\n    outView: elemsOutView,\n    viewStatusList: viewStatusList\n  };\n};\n\nScrollSpy.prototype.isInView = function (el) {\n  var winH = this.winH,\n    scrollTop = this.doc.documentElement.scrollTop || this.doc.body.scrollTop,\n    scrollBottom = scrollTop + winH,\n    rect = el.getBoundingClientRect(),\n    elTop = rect.top + scrollTop,\n    elBottom = elTop + el.offsetHeight;\n\n  return (elTop < scrollBottom) && (elBottom > scrollTop);\n};\n\nScrollSpy.prototype.markNav = function (elems) {\n  var navItems = this.nav,\n    isAlreadyMarked = false;\n\n  for (var i = 0, max = navItems.length; i < max; i++) {\n    if (elems.viewStatusList[i] && !isAlreadyMarked) {\n      isAlreadyMarked = true;\n      navItems[i].classList.add(this.className);\n    } else {\n      navItems[i].classList.remove(this.className);\n    }\n  }\n};\n\n\nmodule.exports = ScrollSpy;\n","/**\n * ScrollSpy\n *\n */\n\nvar ScrollSpy = require('./modules/scrollspy');\n\nglobal.ScrollSpy = module.exports = ScrollSpy;\n","const $introSlider = $('.intro__slider');\nconst $servicesItem = $('.services__item-wrapper');\nconst $servicesDescription = $('.services__description-wrapper')\nconst $valuesSlider = $('.js-values-slider')\n\nclass Slider {\n  constructor(sliderSelector, config) {\n    const defaultConfig = {\n      autoplaySpeed: 2200,\n      autoplay: true,\n      pauseOnHover: true,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      speed: 1000,\n      isEnabled: true,\n      prevArrow: '<svg width=\"8\" height=\"14\" viewBox=\"0 0 8 14\" class=\"arrow-link arrow-link--prev\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n      '<path d=\"M0.285844 6.30477L6.27841 0.287218C6.65961 -0.0957689 7.27766 -0.0957689 7.65867 0.287218C8.03972 0.669864 8.03972 1.29048 7.65867 1.67309L2.35618 6.99771L7.65852 12.3221C8.03957 12.7049 8.03957 13.3255 7.65852 13.7081C7.27747 14.0909 6.65946 14.0909 6.27826 13.7081L0.28569 7.69049C0.0951672 7.49908 1.38283e-05 7.24847 1.38283e-05 6.99774C1.38283e-05 6.74689 0.0953522 6.49609 0.285844 6.30477Z\" fill=\"#009183\"/>\\n' +\n      '</svg>',\n      nextArrow: '<svg width=\"40\" height=\"40\" class=\"arrow-link arrow-link--next\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n      '<rect width=\"40\" height=\"40\" fill=\"none\"/>\\n' +\n      '<circle cx=\"20\" cy=\"20\" r=\"20\" transform=\"scale(-1 1)\" fill=\"#009183\"/>\\n' +\n      '<path d=\"M23.7142 19.3048L17.7216 13.2872C17.3404 12.9042 16.7223 12.9042 16.3413 13.2872C15.9603 13.6699 15.9603 14.2905 16.3413 14.6731L21.6438 19.9977L16.3415 25.3221C15.9604 25.7049 15.9604 26.3255 16.3415 26.7081C16.7225 27.0909 17.3405 27.0909 17.7217 26.7081L23.7143 20.6905C23.9048 20.4991 24 20.2485 24 19.9977C24 19.7469 23.9046 19.4961 23.7142 19.3048Z\" fill=\"#009183\"/>\\n' +\n      '</svg>\\n',\n    };\n\n    this.config = Object.assign({}, defaultConfig, config);\n    this.$slider = $(sliderSelector);\n    this.init();\n  }\n\n  init() {\n    if (this.hasSlider()) this.$slider.slick(this.config);\n  }\n\n  hasSlider() {\n    return this.$slider.length > 0;\n  }\n}\n\nconst sliders = [\n  {\n    selector: $introSlider,\n    isEnabled: true,\n    config: {\n      dots: false,\n      fade: false,\n      cssEase: 'ease',\n\n      responsive: [{\n        breakpoint: 900,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          centerMode: true,\n          variableHeight: true,\n          dots: false,\n          infinite: true,\n        }\n      }],\n    }\n  },\n\n  {\n    selector: $servicesDescription,\n    isEnabled: true,\n    config: {\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      appendDots: $servicesItem,\n      pauseOnHover: false,\n      arrows: false,\n      fade: false,\n      responsive: [{\n        breakpoint: 900,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          dots: false,\n        }\n      }],\n    }\n  },\n  {\n    selector: $servicesItem,\n    isEnabled: true,\n    config: {\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      variableWidth: true,\n      focusOnSelect: true,\n      asNavFor: $servicesDescription,\n      arrows: true,\n      infinite: true,\n      centerMode: true,\n      cssEase: 'ease',\n      pauseOnHover: false,\n\n      responsive: [{\n        breakpoint: 900,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          dots: false,\n        }\n      }],\n    }\n  },\n  {\n    selector: $valuesSlider,\n    isEnabled: true,\n    config: {\n      dots: false,\n      fade: false,\n      cssEase: 'ease',\n    }\n  }\n];\n\n$servicesItem.mouseover(function(){\n  $(this).click();\n});\n\n\nsliders.filter((slider) => slider.isEnabled).forEach((slider) => slider.isEnabled && new Slider(slider.selector, slider.config));\n","const Scroll = () => {\n  const $root = $('body,html');\n  const $menu = $('.js-nav-about');\n  const $link = $('.js-link-about');\n\n  init();\n\n  function init () {\n    $menu.on('click', 'a', scrollToBlock);\n    // $link.on('click', addImg)\n  }\n\n  function scrollToBlock(e) {\n    e.preventDefault();\n      const id = $(this).attr('href');\n      const top = $(id).offset().top;\n      $root.animate({scrollTop: top}, 800);\n  }\n\n  // function addImg () {\n  //   $link.removeClass('add-img');\n  //   $(this).addClass('add-img');\n  // }\n};\n\nexport default Scroll;\n","const Dropdown = () => {\n  const $currentLang = $('.js-lang');\n  const $changeLang = $('.js-lang-hidden');\n  const $arrow = $('.js-arrow');\n  const $listToggler = $('.js-list-toggler');\n  const $list = $('.js-list');\n\n  init();\n\n  function init() {\n    $currentLang.on('click', toggleList);\n    $listToggler.on('click', toggleList)\n  }\n\n  function toggleList  () {\n    $(this).find($changeLang).slideToggle();\n    $(this).find($arrow).toggleClass('is-rotated');\n    $list.children().slideToggle();\n  }\n};\n\nexport default Dropdown;","const Modal = () => {\n\n  const $modalWindow = $('.js-pop-up');\n  const $popupCallBtn = $('.js-pop-up-call');\n  const $closeBtn = $('.close');\n  const $vacancy = $('.vacancies__item');\n\n  init();\n\n  function init () {\n    $popupCallBtn.on('click', showModal);\n    $(document).on('mousedown', handleDocumentClick);\n    $closeBtn.on('mousedown', hideModal);\n    $(document).on('scroll', hideBlock)\n  }\n\n  function showModal () {\n    $(this).find($modalWindow).stop().fadeIn();\n    $vacancy.addClass('is-open')\n  }\n\n  function handleDocumentClick (e) {\n    if ($modalWindow.has(e.target).length === 0){\n      $modalWindow.hide();\n      $vacancy.removeClass('is-open')\n    }\n  }\n\n  function hideModal() {\n    $(this).parent($modalWindow).hide();\n  }\n\n  function hideBlock() {\n    $('.header-wrapper').slideUp();\n  }\n};\n\nexport default Modal;","const Menu = () => {\n  const $burgerMenuIcon = $('.js-burger');\n  const $burgerMenu = $('.burger-menu');\n  const $burgerCloseBtn = $('.js-burger-close');\n\n  init();\n\n  function init() {\n    $burgerMenuIcon.on('click', showMenu);\n    $burgerCloseBtn.on('click', hideMenu);\n  }\n\n  function showMenu() {\n    $burgerMenu.slideDown(700);\n  }\n\n  function hideMenu() {\n    $burgerMenu.slideUp(700);\n  }\n};\n\nexport default Menu;","const Tabs = () => {\n  const $tab = $('.tab-link');\n  const $tabContent = $('.tab-content');\n\n  init();\n\n  function init () {\n    $tab.on('click', showTab)\n  }\n\n  function showTab() {\n    let $tabId = $(this).attr('data-tab');\n    $tab.removeClass('is-active');\n    $tabContent.removeClass('is-active');\n\n    $(this).addClass('is-active');\n    $(\"#\"+$tabId).addClass('is-active');\n  }\n};\n\nexport default Tabs;","import 'slick-carousel';\nimport 'scrollspy-js';\n\nimport './slider';\nimport Scroll from './anchor-scroll'\nimport Dropdown from './dropdown'\nimport Modal from './modal'\nimport Menu from './menu'\nimport Tabs from \"./tabs\";\n\nScroll();\nDropdown();\nModal();\nMenu();\nTabs();\n\n\nvar spy = new ScrollSpy('#js-scrollspy', {\n  nav: '.js-scrollspy-nav > a',\n  className: 'is-inview'\n});\n"],"names":["global","factory","window","this","noGlobal","arr","document","getProto","Object","getPrototypeOf","slice","concat","push","indexOf","class2type","toString","hasOwn","hasOwnProperty","fnToString","ObjectFunctionString","call","support","isFunction","obj","nodeType","isWindow","preservedScriptAttributes","type","src","noModule","DOMEval","code","doc","node","i","script","createElement","text","head","appendChild","parentNode","removeChild","toType","version","jQuery","selector","context","fn","init","rtrim","isArrayLike","length","prototype","jquery","constructor","toArray","get","num","pushStack","elems","ret","merge","prevObject","each","callback","map","elem","apply","arguments","first","eq","last","len","j","end","sort","splice","extend","options","name","copy","copyIsArray","clone","target","deep","isPlainObject","Array","isArray","undefined","expando","Math","random","replace","isReady","error","msg","Error","noop","proto","Ctor","isEmptyObject","globalEval","trim","makeArray","results","inArray","second","grep","invert","matches","callbackExpect","arg","value","guid","Symbol","iterator","split","toLowerCase","Sizzle","Expr","getText","isXML","tokenize","compile","select","outermostContext","sortInput","hasDuplicate","setDocument","docElem","documentIsHTML","rbuggyQSA","rbuggyMatches","contains","Date","preferredDoc","dirruns","done","classCache","createCache","tokenCache","compilerCache","sortOrder","a","b","pop","push_native","list","booleans","whitespace","identifier","attributes","pseudos","rwhitespace","RegExp","rcomma","rcombinators","rattributeQuotes","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rnative","rquickExpr","rsibling","runescape","funescape","_","escaped","escapedWhitespace","high","String","fromCharCode","rcssescape","fcssescape","ch","asCodePoint","charCodeAt","unloadHandler","disabledAncestor","addCombinator","disabled","dir","next","childNodes","e","els","seed","m","nid","match","groups","newSelector","newContext","ownerDocument","exec","getElementById","id","getElementsByTagName","getElementsByClassName","qsa","test","nodeName","getAttribute","setAttribute","toSelector","join","testContext","querySelectorAll","qsaError","removeAttribute","keys","cache","key","cacheLength","shift","markFunction","assert","el","addHandle","attrs","handler","attrHandle","siblingCheck","cur","diff","sourceIndex","nextSibling","createInputPseudo","createButtonPseudo","createDisabledPseudo","isDisabled","createPositionalPseudo","argument","matchIndexes","documentElement","hasCompare","subWindow","defaultView","top","addEventListener","attachEvent","className","createComment","getById","getElementsByName","filter","attrId","find","getAttributeNode","tag","tmp","innerHTML","input","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","adown","bup","compare","sortDetached","aup","ap","bp","unshift","expr","elements","attr","val","specified","escape","sel","uniqueSort","duplicates","detectDuplicates","sortStable","textContent","firstChild","nodeValue","selectors","createPseudo","relative",">"," ","+","~","preFilter","excess","unquoted","nodeNameSelector","pattern","operator","check","result","what","simple","forward","ofType","xml","uniqueCache","outerCache","nodeIndex","start","parent","useCache","lastChild","uniqueID","pseudo","args","setFilters","idx","matched","not","matcher","unmatched","has","innerText","lang","elemLang","hash","location","root","focus","activeElement","hasFocus","href","tabIndex","enabled","checked","selected","selectedIndex","empty","header","button","even","odd","lt","gt","radio","checkbox","file","password","image","submit","reset","tokens","combinator","base","skip","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","temp","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherOut","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","filters","parseOnly","soFar","preFilters","cached","elementMatchers","setMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","token","compiled","defaultValue","unique","isXMLDoc","escapeSelector","until","truncate","is","siblings","n","rneedsContext","rsingleTag","winnow","qualifier","self","rootjQuery","parseHTML","ready","rparentsprev","guaranteedUnique","children","contents","prev","sibling","targets","l","closest","index","prevAll","add","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","contentDocument","content","reverse","rnothtmlwhite","Identity","v","Thrower","ex","adoptValue","resolve","reject","noValue","method","promise","fail","then","Callbacks","object","flag","firing","memory","fired","locked","queue","firingIndex","fire","once","stopOnFalse","remove","disable","lock","fireWith","Deferred","func","tuples","state","always","deferred","catch","pipe","fns","newDefer","tuple","returned","progress","notify","onFulfilled","onRejected","onProgress","maxDepth","depth","special","that","mightThrow","TypeError","notifyWith","resolveWith","process","exceptionHook","stackTrace","rejectWith","getStackHook","setTimeout","stateString","when","singleValue","remaining","resolveContexts","resolveValues","master","updateFunc","rerrorNames","stack","console","warn","message","readyException","readyList","completed","removeEventListener","readyWait","wait","readyState","doScroll","access","chainable","emptyGet","raw","bulk","rmsPrefix","rdashAlpha","fcamelCase","all","letter","toUpperCase","camelCase","string","acceptData","owner","Data","uid","defineProperty","configurable","set","data","prop","hasData","dataPriv","dataUser","rbrace","rmultiDash","dataAttr","JSON","parse","removeData","_data","_removeData","dequeue","startLength","hooks","_queueHooks","stop","setter","clearQueue","count","defer","pnum","source","rcssNum","cssExpand","isHiddenWithinTree","style","display","css","swap","old","adjustCSS","valueParts","tween","adjusted","scale","maxIterations","currentValue","initial","unit","cssNumber","initialInUnit","defaultDisplayMap","showHide","show","values","body","hide","toggle","rcheckableType","rtagName","rscriptType","wrapMap","option","thead","col","tr","td","_default","getAll","setGlobalEval","refElements","optgroup","tbody","tfoot","colgroup","caption","th","div","rhtml","buildFragment","scripts","selection","ignored","wrap","fragment","createDocumentFragment","nodes","htmlPrefilter","createTextNode","checkClone","cloneNode","noCloneChecked","rkeyEvent","rmouseEvent","rtypenamespace","returnTrue","returnFalse","safeActiveElement","err","on","types","one","origFn","event","off","handleObjIn","eventHandle","events","t","handleObj","handlers","namespaces","origType","elemData","handle","triggered","dispatch","delegateType","bindType","namespace","delegateCount","setup","mappedTypes","origCount","teardown","removeEvent","nativeEvent","handlerQueue","fix","delegateTarget","preDispatch","isPropagationStopped","currentTarget","isImmediatePropagationStopped","rnamespace","preventDefault","stopPropagation","postDispatch","matchedHandlers","matchedSelectors","addProp","hook","Event","enumerable","originalEvent","writable","load","noBubble","trigger","blur","click","beforeunload","returnValue","props","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","now","isSimulated","stopImmediatePropagation","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","view","char","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","mouseenter","mouseleave","pointerenter","pointerleave","orig","related","rxhtmlTag","rnoInnerhtml","rchecked","rcleanScript","manipulationTarget","disableScript","restoreScript","cloneCopyEvent","dest","pdataOld","pdataCur","udataOld","udataCur","domManip","collection","hasScripts","iNoClone","valueIsFunction","html","_evalUrl","keepData","cleanData","dataAndEvents","deepDataAndEvents","srcElements","destElements","inPage","detach","append","prepend","insertBefore","before","after","replaceWith","replaceChild","appendTo","prependTo","insertAfter","replaceAll","original","insert","rnumnonpx","getStyles","opener","getComputedStyle","rboxStyle","curCSS","computed","width","minWidth","maxWidth","getPropertyValue","pixelBoxStyles","addGetHookIf","conditionFn","hookFn","computeStyleTests","container","cssText","divStyle","pixelPositionVal","reliableMarginLeftVal","roundPixelMeasures","marginLeft","right","pixelBoxStylesVal","boxSizingReliableVal","position","scrollboxSizeVal","offsetWidth","measure","round","parseFloat","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","rdisplayswap","rcustomProp","cssShow","visibility","cssNormalTransform","letterSpacing","fontWeight","cssPrefixes","emptyStyle","finalPropName","cssProps","capName","vendorPropName","setPositiveNumber","subtract","max","boxModelAdjustment","dimension","box","isBorderBox","styles","computedVal","extra","delta","ceil","getWidthOrHeight","valueIsBorderBox","Tween","easing","cssHooks","opacity","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","lineHeight","order","orphans","widows","zIndex","zoom","origName","isCustomProp","setProperty","isFinite","getClientRects","getBoundingClientRect","left","margin","padding","border","prefix","suffix","expand","expanded","parts","propHooks","run","percent","eased","duration","pos","step","fx","scrollTop","scrollLeft","linear","p","swing","cos","PI","fxNow","inProgress","opt","rfxtypes","rrun","schedule","hidden","requestAnimationFrame","interval","tick","createFxNow","genFx","includeWidth","height","createTween","animation","Animation","tweeners","properties","stopped","prefilters","currentTime","startTime","tweens","opts","specialEasing","originalProperties","originalOptions","gotoEnd","propFilter","bind","complete","timer","anim","*","tweener","oldfire","propTween","restoreDisplay","isBox","dataShow","unqueued","overflow","overflowX","overflowY","prefilter","speed","speeds","fadeTo","to","animate","optall","doAnimation","finish","stopQueue","timers","cssFn","slideDown","slideUp","slideToggle","fadeIn","fadeOut","fadeToggle","slow","fast","delay","time","timeout","clearTimeout","checkOn","optSelected","radioValue","boolHook","removeAttr","nType","attrHooks","attrNames","getter","lowercaseName","rfocusable","rclickable","stripAndCollapse","getClass","classesToArray","removeProp","propFix","tabindex","parseInt","for","class","addClass","classes","curValue","clazz","finalValue","removeClass","toggleClass","stateVal","isValidValue","classNames","hasClass","rreturn","valHooks","optionSet","focusin","rfocusMorph","stopPropagationCallback","onlyHandlers","bubbleType","ontype","lastElement","eventPath","isTrigger","parentWindow","simulate","triggerHandler","attaches","nonce","rquery","parseXML","DOMParser","parseFromString","rbracket","rCRLF","rsubmitterTypes","rsubmittable","buildParams","traditional","param","s","valueOrFunction","encodeURIComponent","serialize","serializeArray","r20","rhash","rantiCache","rheaders","rnoContent","rprotocol","transports","allTypes","originAnchor","addToPrefiltersOrTransports","structure","dataTypeExpression","dataType","dataTypes","inspectPrefiltersOrTransports","jqXHR","inspected","seekingTransport","inspect","prefilterOrFactory","dataTypeOrTransport","ajaxExtend","flatOptions","ajaxSettings","active","lastModified","etag","url","isLocal","protocol","processData","async","contentType","accepts","json","responseFields","converters","* text","text html","text json","text xml","ajaxSetup","settings","ajaxPrefilter","ajaxTransport","ajax","transport","cacheURL","responseHeadersString","responseHeaders","timeoutTimer","urlAnchor","fireGlobals","uncached","callbackContext","globalEventContext","completeDeferred","statusCode","requestHeaders","requestHeadersNames","strAbort","getResponseHeader","getAllResponseHeaders","setRequestHeader","overrideMimeType","mimeType","status","abort","statusText","finalText","crossDomain","host","hasContent","ifModified","headers","beforeSend","success","send","nativeStatusText","responses","isSuccess","response","modified","ct","finalDataType","firstDataType","ajaxHandleResponses","conv2","current","conv","dataFilter","throws","ajaxConvert","getJSON","getScript","wrapAll","firstElementChild","wrapInner","htmlIsFunction","unwrap","visible","offsetHeight","xhr","XMLHttpRequest","xhrSuccessStatus","0","1223","xhrSupported","cors","errorCallback","open","username","xhrFields","onload","onerror","onabort","ontimeout","onreadystatechange","responseType","responseText","binary","text script","charset","scriptCharset","evt","oldCallbacks","rjsonp","jsonp","jsonpCallback","originalSettings","callbackName","overwritten","responseContainer","jsonProp","createHTMLDocument","implementation","keepScripts","parsed","params","animated","offset","setOffset","curPosition","curLeft","curCSSTop","curTop","curOffset","curCSSLeft","curElem","using","rect","win","pageYOffset","pageXOffset","offsetParent","parentOffset","scrollTo","Height","Width","defaultExtra","funcName","hover","fnOver","fnOut","unbind","delegate","undelegate","proxy","holdReady","hold","parseJSON","isNumeric","isNaN","_jQuery","_$","$","noConflict","module","w","instanceUid","Slick","element","dataSettings","defaults","accessibility","adaptiveHeight","appendArrows","appendDots","arrows","asNavFor","prevArrow","nextArrow","autoplay","autoplaySpeed","centerMode","centerPadding","cssEase","customPaging","slider","dots","dotsClass","draggable","edgeFriction","fade","focusOnSelect","focusOnChange","infinite","initialSlide","lazyLoad","mobileFirst","pauseOnHover","pauseOnFocus","pauseOnDotsHover","respondTo","responsive","rows","rtl","slide","slidesPerRow","slidesToShow","slidesToScroll","swipe","swipeToSlide","touchMove","touchThreshold","useCSS","useTransform","variableWidth","vertical","verticalSwiping","waitForAnimate","initials","animating","dragging","autoPlayTimer","currentDirection","currentLeft","currentSlide","direction","$dots","listWidth","listHeight","loadIndex","$nextArrow","$prevArrow","scrolling","slideCount","slideWidth","$slideTrack","$slides","sliding","slideOffset","swipeLeft","swiping","$list","touchObject","transformsEnabled","unslicked","activeBreakpoint","animType","animProp","breakpoints","breakpointSettings","cssTransitions","focussed","interrupted","paused","positionProp","rowCount","shouldClick","$slider","$slidesCache","transformType","transitionType","visibilityChange","windowWidth","windowTimer","mozHidden","webkitHidden","autoPlay","autoPlayClear","autoPlayIterator","changeSlide","clickHandler","selectHandler","setPosition","swipeHandler","dragHandler","keyHandler","htmlExpr","registerBreakpoints","activateADA","aria-hidden","addSlide","slickAdd","markup","addBefore","unload","reinit","animateHeight","targetHeight","outerHeight","animateSlide","targetLeft","animProps","animStart","applyTransition","disableTransition","getNavTarget","slick","slideHandler","transition","setInterval","clearInterval","slideTo","buildArrows","aria-disabled","buildDots","dot","getDotCount","buildOut","setupInfinite","updateDots","setSlideClasses","buildRows","c","newSlides","numOfSlides","originalSlides","slidesPerSection","row","checkResponsive","forceUpdate","breakpoint","targetBreakpoint","respondToWidth","triggerBreakpoint","sliderWidth","innerWidth","min","unslick","refresh","dontAnimate","indexOffset","$target","checkNavigable","navigables","prevNavigable","getNavigableIndexes","cleanUpEvents","interrupt","cleanUpSlideEvents","orientationChange","resize","cleanUpRows","destroy","fadeSlide","slideIndex","fadeSlideOut","filterSlides","slickFilter","focusHandler","$sf","getCurrent","slickCurrentSlide","breakPoint","counter","pagerQty","getLeft","verticalHeight","targetSlide","coef","verticalOffset","floor","offsetLeft","outerWidth","getOption","slickGetOption","indexes","getSlick","getSlideCount","swipedSlide","centerOffset","abs","goTo","slickGoTo","creation","setProps","startLoad","loadSlider","initializeEvents","updateArrows","initADA","numDotGroups","tabControlIndexes","slideControlIndex","role","ariaButtonControl","aria-describedby","mappedSlideIndex","aria-controls","aria-label","aria-selected","initArrowEvents","initDotEvents","initSlideEvents","action","initUI","tagName","loadRange","rangeStart","rangeEnd","loadImages","imagesScope","imageSource","imageSrcSet","imageSizes","imageToLoad","prevSlide","nextSlide","progressiveLazyLoad","slickNext","pause","slickPause","play","slickPlay","postSlide","slickPrev","tryCount","$imgsToLoad","initializing","lastVisibleIndex","currentBreakpoint","responsiveSettings","windowDelay","removeSlide","slickRemove","removeBefore","removeAll","setCSS","x","y","positionProps","setDimensions","setFade","setHeight","setOption","slickSetOption","item","bodyStyle","WebkitTransition","MozTransition","msTransition","OTransform","perspectiveProperty","webkitPerspective","MozTransform","MozPerspective","webkitTransform","msTransform","transform","allSlides","remainder","evenCoef","infiniteCount","targetElement","sync","animSlide","oldSlide","slideLeft","navTarget","swipeDirection","xDist","yDist","r","swipeAngle","startX","curX","startY","curY","atan2","swipeEnd","swipeLength","edgeHit","minSwipe","fingerCount","swipeStart","swipeMove","positionOffset","verticalSwipeLength","sqrt","pow","unfilterSlides","slickUnfilter","fromBreakpoint","require$$0","ScrollSpy","wrapper","querySelector","nav","winH","innerHeight","getContents","targetList","scrollingTimer","resizingTimer","spy","_this","cb","getElemsViewState","markNav","elemsInView","elemsOutView","viewStatusList","currentContent","isInView","inView","outView","scrollBottom","elTop","elBottom","navItems","isAlreadyMarked","classList","$introSlider","$servicesItem","$servicesDescription","$valuesSlider","Slider","sliderSelector","config","assign","hasSlider","sliders","mouseover","isEnabled","forEach","Scroll","$root","$menu","scrollToBlock","Dropdown","$currentLang","$changeLang","$arrow","$listToggler","toggleList","Modal","$modalWindow","$popupCallBtn","$closeBtn","$vacancy","showModal","handleDocumentClick","hideModal","hideBlock","Menu","$burgerMenuIcon","$burgerMenu","$burgerCloseBtn","showMenu","hideMenu","Tabs","$tab","$tabContent","showTab","$tabId"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}